name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: studentanalyzer-jar
          path: target/*.jar

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: studentanalyzer-jar
          path: ./deploy

      - name: Configure SSH access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy and Restart Application
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          echo "ðŸš€ Deploying latest build to EC2 at $HOST..."

          # Copy the built JAR to EC2
          scp -o StrictHostKeyChecking=no ./deploy/*.jar $USER@$HOST:/home/$USER/

          # Connect to EC2 and configure + restart
          ssh -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            set -e
            echo "Creating application.properties dynamically..."

            cat <<EOT > /home/$USER/application.properties
            spring.application.name=studentanalyser
            spring.data.mongodb.uri=${MONGO_URI}
            spring.data.mongodb.database=student-management
            server.port=8080
            server.address=0.0.0.0
            management.endpoints.web.exposure.include=*
            management.endpoint.health.show-details=always
            management.metrics.export.prometheus.enabled=true
            aws.xray.enabled=true
            EOT
  
            # Kill old process if running
            if pgrep -f "studentanalyser-0.0.1-SNAPSHOT.jar" > /dev/null; then
            echo "ðŸ›‘ Stopping old process..."
            pkill -f "studentanalyser-0.0.1-SNAPSHOT.jar"
            fi
            
            sleep 3
            echo "ðŸš€ Starting new version..."
            nohup java -jar /home/$USER/$(ls -t /home/$USER/*.jar | head -n1) \
            --spring.config.location=file:/home/$USER/application.properties \
            > /home/$USER/app.log 2>&1 &
          
            echo "âœ… Application restarted successfully!"
          EOF
